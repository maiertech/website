<script lang="ts">
	import { CodeSnippet, Example, Figure } from '@maiertech/sveltekit-helpers';

	import ActiveExample from './examples/ActiveExample.svelte';
	import srcActiveExample from './examples/ActiveExample.svelte?raw';

	import FocusExample from './examples/FocusExample.svelte';
	import srcFocusExample from './examples/FocusExample.svelte?raw';

	import FocusVisibleExample from './examples/FocusVisibleExample.svelte';
	import srcFocusVisibleExample from './examples/FocusVisibleExample.svelte?raw';
</script>

Recently, I worked on the newsletter sign-up form for this website. When I looked at examples, I
noticed that other developers used the pseudo-classes
[`:active`](https://developer.mozilla.org/en-US/docs/Web/CSS/:active),
[`:focus`](https://developer.mozilla.org/en-US/docs/Web/CSS/:focus), and
[`:focus-visible`](https://developer.mozilla.org/en-US/docs/Web/CSS/:focus-visible) to style form
fields.

My understanding of these pseudo-classes wasn't great, so I decided to read up on their
specifications. In this post, I share my learnings.

## Pseudo-class :active

A browser applies `:active` when a user activates an element. Activation refers to the timespan
between clicking an element and releasing the mouse button. `:active` can be applied to elements
with which users interact, e.g., `<a>`, `<button>`, `<input>`, `<select>`, and `<textarea>`.

When you click the input field below, you can see a dashed red outline until you release the mouse
button. Note that `:active` is not applied on touch devices.

<Example>
	{#snippet render()}
		<ActiveExample />
	{/snippet}
	{#snippet code()}
		<CodeSnippet
			lang="svelte"
			src={srcActiveExample}
		/>
	{/snippet}
</Example>

When you release the mouse button, the input field has focus. The browser draws a default outline
around it to highlight its focus. Now click the submit button in the example above. While you click
the submit button, you can see the dashed red outline until you release it.

The takeaway from this example is that `:active` styles are in effect while you press the mouse
button, until you release it.

## Pseudo-class :focus

A browser applies `:focus` when the activation is complete and an element is ready for user
interaction. There are different ways of giving focus to an element. You can click or tap the
element or use keyboard navigation with the `Tab` key.

Click or tap in the input field below. This time, the dashed red outline stays until the input field
loses focus. Likewise, when you click the submit button, the dashed outline stays until the button
loses focus.

Instead of clicking the input field and submit button, you can use the `Tab` key to navigate between
elements and focus them.

<Example>
	{#snippet render()}
		<FocusExample />
	{/snippet}
	{#snippet code()}
		<CodeSnippet
			lang="svelte"
			src={srcFocusExample}
		/>
	{/snippet}
</Example>

The takeaway from this example is that `:focus` styles are applied when an element has focus, and it
does not matter whether a click, tap, or the `Tab` key triggers the focus.

## Pseudo-class :focus-visible

`:focus-visible` can only be applied when an element has focus. However, a browser can decide
whether or not to apply `:focus-visible` to an element with focus. Browsers use a heuristic to
determine whether they apply `:focus-visible` to a focused element.

Click or tap the input field. Like in the previous example, you can see the dashed red outline while
the input field has focus. The behavior of `:focus-visible` seems identical to `:focus`. But when
you click the submit button, the dashed red outline is not visible.

However, when you focus the input field and then use the `Tab` key to focus the submit button, the
dashed red outline is visible.

<Example>
	{#snippet render()}
		<FocusVisibleExample />
	{/snippet}
	{#snippet code()}
		<CodeSnippet
			lang="svelte"
			src={srcFocusVisibleExample}
		/>
	{/snippet}
</Example>

The browser tries to apply `:focus-visible` only when it makes sense. For the input field, the
`:focus-visible` styles emphasize that the user is expected to type in some information. When the
user clicks the submit button, there is no need to apply `:focus-visible` styles because no further
interaction is necessary. For tab navigation, on the other hand, it makes sense to apply
`:focus-visible` styles because the user still needs to submit the form.

The takeaway from this is that for most common use cases you will encounter as a developer, it makes
sense to use the `:focus-visible` pseudo-class instead of `:focus`, and let the browser's heuristic
decide when to apply the styles.
