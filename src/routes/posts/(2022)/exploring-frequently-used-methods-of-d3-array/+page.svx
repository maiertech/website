<script>
	import { CodeSnippet, Example, Figure } from '@maiertech/sveltekit-helpers';

	import D3MinExample from './examples/D3MinExample.svelte';
	import srcD3MinExample from './examples/D3MinExample.svelte?raw';

	import D3MaxExample from './examples/D3MaxExample.svelte';
	import srcD3MaxExample from './examples/D3MaxExample.svelte?raw';

	import D3ExtentExample from './examples/D3ExtentExample.svelte';
	import srcD3ExtentExample from './examples/D3ExtentExample.svelte?raw';

	import D3RangeExample from './examples/D3RangeExample.svelte';
	import srcD3RangeExample from './examples/D3RangeExample.svelte?raw';

	import D3TicksExample from './examples/D3TicksExample.svelte';
	import srcD3TicksExample from './examples/D3TicksExample.svelte?raw';
</script>

In this post, I will introduce you to methods from [d3-array](https://github.com/d3/d3-array) that I
often use for data visualization.

## d3.min, d3.max, and d3.extent

[d3.min](https://github.com/d3/d3-array#min) returns the minimum of an array using the natural
order. Unlike
[Math.min](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/min),
d3.min can handle missing values.

Let's look at an example:

<Figure class="mb-8">
	<Example>
		{#snippet render()}
			<D3MinExample />
		{/snippet}
		{#snippet code()}
			<CodeSnippet lang="svelte" src={srcD3MinExample} />
		{/snippet}
	</Example>
</Figure>

Likewise, [d3.max](https://github.com/d3/d3-array#max) returns the maximum. But what happens when
the array for which we want to compute the maximum contains objects? We can use an _accessor
function_ to retrieve a specific object property and transform it. In the following example, the
accessor

<Figure class="mb-8">
	<CodeSnippet lang="js" src="(d) => new Date(d.date);" />
</Figure>

extracts the date property and converts it into a JavaScript
[Date](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date), which
is used for comparison. This returns the most recent date (maximum). However, what we need is the
object with the most recent date, not just the most recent date. We can use
[d3.maxIndex](https://github.com/d3/d3-array#maxIndex) to retrieve the index of the object with the
most recent date.

Let's look at an example:

<Figure class="mb-8">
	<Example>
		{#snippet render()}
			<D3MaxExample />
		{/snippet}
		{#snippet code()}
			<CodeSnippet lang="svelte" src={srcD3MaxExample} />
		{/snippet}
	</Example>
</Figure>

To create an axis for numeric values with D3, you need to know the extent of the data along that
axis. Extent means the minimum and maximum values.
[d3.extent](https://github.com/d3/d3-array#extent) returns an array with these values. It works not
only with numeric values but with any values that have a natural sort order.

Let's look at two examples:

<Figure class="mb-8">
	<Example>
		{#snippet render()}
			<D3ExtentExample />
		{/snippet}
		{#snippet code()}
			<CodeSnippet lang="svelte" src={srcD3ExtentExample} />
		{/snippet}
	</Example>
</Figure>

## d3.range

[d3.range](https://github.com/d3/d3-array#range) returns an array of evenly spaced numbers. It has
three arguments: _start_, _stop_, and _step_. The only required argument is _stop_. _start_ defaults
to 0, and _step_ defaults to 1. _start_ is inclusive, _stop_ is exclusive.

Let's look at these examples:

<Figure class="mb-8">
	<Example>
		{#snippet render()}
			<D3RangeExample />
		{/snippet}
		{#snippet code()}
			<CodeSnippet lang="svelte" src={srcD3RangeExample} />
		{/snippet}
	</Example>
</Figure>

As the `floatingPointRange` example shows, with d3.range you can run into
[pitfalls of binary floating-point math](https://stackoverflow.com/questions/588004/is-floating-point-math-broken).
You can fix this issue with
[Number.toFixed](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toFixed):

<Figure class="mb-8">
	<CodeSnippet lang="javascript" src="range(0, 1, 0.2).map((n) => n.toFixed(1));" />
</Figure>

Finally, if you try to create a range that would cause an infinite loop, like the
`infiniteLoopRange`, d3.range returns an empty array.

## d3.ticks

[d3.ticks](https://github.com/d3/d3-array#ticks) generates an array of nicely rounded numbers inside
an interval [_start_, _stop_]. You have to pass in three arguments:

<Figure class="mb-6">
	<CodeSnippet lang="javascript" src="ticks(start, stop, count);" />
</Figure>

`count` is the number of ticks you are aiming for. However, there is no guarantee that you will get
this number. As the example below shows, you may get more or fewer ticks. The only thing that
matters to d3.ticks is that the ticks are nicely rounded and inside [_start_, _stop_]. _start_ and
_stop_ can be part of the ticks.

Let's look at a few examples:

<Figure class="mb-8">
	<Example>
		{#snippet render()}
			<D3TicksExample />
		{/snippet}
		{#snippet code()}
			<CodeSnippet lang="svelte" src={srcD3TicksExample} />
		{/snippet}
	</Example>
</Figure>

## JavaScript Array methods

The [d3-array documentation](https://github.com/d3/d3-array#d3-array) points out that you should
master
[JavaScript's built-in Array methods](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array).
d3-array complements them but does not replace them. You cannot do data visualization with
JavaScript without knowing the built-in Array methods like the back of your hand.
